/*! For license information please see main.6609e20adf1cb6287847.hot-update.js.LICENSE.txt */
self.webpackHotUpdateportfolio_hursun_2("main",{"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},s=["O","ms","Moz","Webkit"],n=/([A-Z])/g,i={};function a(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),i=s.length;i--;){var a=s[i]+n;if(void 0!==t[a])return a}return e}e.exports=function(e){return e in i?i[e]:i[e]=a(e)},e.exports.dash=function(e){return e=a(e),n.test(e)&&(e="-"+e.replace(n,"-$1"),n.lastIndex=0),e.toLowerCase()}},"./app/animations/Highlight.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var n=s("./app/classes/Animation.js"),i=s("./node_modules/gsap/index.js");class a extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){this.timelineIn=i.default.timeline({delay:1}),i.default.set(this.element,{autoAlpha:1}),this.timelineIn.fromTo(this.element,{height:0},{duration:6,height:"100%",ease:"expo.out"})}animateOut(){i.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Paragraph.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var n=s("./app/classes/Animation.js"),i=s("./node_modules/gsap/index.js");s("./app/utils/text.js");class a extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){this.timelineIn=i.default.timeline(),i.default.set(this.element,{autoAlpha:1}),this.timelineIn.fromTo(this.element,{autoAlpha:0,y:"100%"},{autoAlpha:1,y:"0%",ease:"expo.out",duration:2},0)}animateOut(){i.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Title.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/gsap/index.js"),i=s("./app/classes/Animation.js"),a=s("./node_modules/lodash/each.js"),l=s("./app/utils/text.js");class r extends i.default{constructor({element:e,elements:t}){super({element:e,elements:t}),(0,l.split)({element:this.element,append:!0}),(0,l.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),n.default.set(this.element,{autoAlpha:1}),a(this.elementLinesSpans,((e,t)=>{this.timelineIn.fromTo(e,{y:"100%"},{delay:.2*t,duration:1.5,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}}},"./app/classes/Animation.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./app/classes/Component.js");s("./node_modules/lodash/each.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}}},"./app/classes/AsyncLoad.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./app/classes/Component.js");class i extends n.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=()=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Page.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});var n=s("./node_modules/lodash/each.js"),i=s("./node_modules/gsap/index.js"),a=s("./node_modules/prefix/index.js"),l=s("./app/classes/AsyncLoad.js"),r=s("./app/animations/Title.js"),o=s("./app/animations/Paragraph.js"),h=s("./app/animations/Highlight.js");class m{constructor({element:e,id:t,elements:s}){this.selector=e,this.selectorChildren={...s,loadScreen:document.querySelector(".load__screen"),loadScreenImg:document.querySelector(".load__screen__img"),animationTitles:'[data-animation="title"]',animationParagraph:'[data-animation="paragraph"]',animationHighlight:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=t,this.scroll={current:0,target:0,limit:0},this.mouse={x:0,y:0},this.transformPrefix=a("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},n(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=this.element.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))})),this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),this.createAnimation(),this.createAudio(),this.createAsyncLoad(),"home"===this.id&&this.createPoints(),"gallery"===this.id&&this.createScrollGsap(),"spotify"===this.id&&this.playHandle()}createAnimation(){n(this.elements.animationTitles,(e=>{new r.default({element:e})})),n(this.elements.animationParagraph,(e=>{new o.default({element:e})})),n(this.elements.animationHighlight,(e=>{new h.default({element:e})}))}createAudio(){this.sideAudio=new Audio("/Audio/mixkit-interface-hint-notification-911.wav"),this.sideAudio.volume=1,this.elements.loadScreen.addEventListener("click",(()=>{this.sideAudio.play()}))}createAsyncLoad(){n(this.elements.preloaders,(e=>{new l.default({element:e.target?e.target:e})}))}show(){return new Promise((e=>{this.animationOut=i.default.timeline(),this.animationOut.set(this.elements.loadScreen,{left:"-200%"}),this.animationOut.call((()=>{e()}))}))}hide(){return new Promise((e=>{this.animationIn=i.default.timeline(),this.animationIn.set(this.elements.loadScreen,{autoAlpha:1}),this.animationIn.set(this.elements.loadScreenImg,{autoAlpha:1}),this.animationIn.to(this.elements.loadScreen,{duration:1,width:"100%",left:"0%",ease:"Expo.easeInOut"}),this.animationIn.to(this.elements.loadScreen,{duration:2,width:"100%",left:"100%",ease:"Expo.easeInOut"})}))}onResize(){this.elements?.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight)}onScroll(e){this.scroll.target+=e.pixelY,this.scroll.target%800==0&&this.sideAudio.play()}onMousemove(e){this.mouse.x=.01*(e.clientX-window.innerWidth)+5,this.mouse.y=.01*(e.clientY-window.innerHeight)+5}onTouchMove(){}onTouchStart(){}onTouchEnd(){}update(){this.scroll.target=i.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.target<.01&&(this.scroll.target=0),this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,.01),this.elements?.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`),this.elements?.bar&&n(this.elements.bar,(e=>{e.style.transform=`translateX(-${this.scroll.current}px)`})),this.elements.points&&n(this.elements.points,((e,t)=>{e.style.transform=`translateX(${this.mouse.x*(t+1)}px) translateY(${this.mouse.y*(t+1)}px)`}))}}},"./app/utils/text.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{calculate:()=>a,split:()=>i});var n=s("./node_modules/lodash/each.js");function i({element:e,expression:t=" ",append:s=!0}){const i=function(e,t){const s=e.split("<br>");let i=[];return n(s,((e,s)=>{s>0&&i.push("<br>"),i=i.concat(e.split(t));let a=!1,l="";const r=[];n(i,(e=>{a||!e.includes("<a")&&!e.includes("<strong")||(l="",a=!0),a&&(l+=` ${e}`),a&&(e.includes("/a>")||e.includes("/strong>"))&&(r.push(l),l=""),a||""!==l||r.push(e),a&&(e.includes("/a>")||e.includes("/strong>"))&&(a=!1)})),i=r})),i}(e.innerHTML.toString().trim(),t);let a="";n(i,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");n(t,((e,t)=>{a+=t>0?"<br>"+l(e):l(e)}))}else a+=l(e)})),e.innerHTML=a;const r=e.querySelectorAll("span");return s&&n(r,(e=>{const t=1===e.textContent.length,s=""!==e.innerHTML.trim(),n="&"!==e.textContent,i="-"!==e.textContent;t&&s&&n&&i&&(e.innerHTML=`${e.textContent}&nbsp;`)})),r}function a(e){const t=[];let s=[],i=e[0].offsetTop;return n(e,((n,a)=>{n.offsetTop===i&&s.push(n),n.offsetTop!==i&&(t.push(s),s=[],s.push(n),i=n.offsetTop),a+1===e.length&&t.push(s)})),t}function l(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}}},(function(e){e.h=()=>"b1ef16edb86d7eb24552"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Zml4L2luZGV4LmpzIiwid2VicGFjazovL3BvcnRmb2xpby1odXJzdW4tMi8uL2FwcC9hbmltYXRpb25zL0hpZ2hsaWdodC5qcyIsIndlYnBhY2s6Ly9wb3J0Zm9saW8taHVyc3VuLTIvLi9hcHAvYW5pbWF0aW9ucy9QYXJhZ3JhcGguanMiLCJ3ZWJwYWNrOi8vcG9ydGZvbGlvLWh1cnN1bi0yLy4vYXBwL2FuaW1hdGlvbnMvVGl0bGUuanMiLCJ3ZWJwYWNrOi8vcG9ydGZvbGlvLWh1cnN1bi0yLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL3BvcnRmb2xpby1odXJzdW4tMi8uL2FwcC9jbGFzc2VzL0FzeW5jTG9hZC5qcyIsIndlYnBhY2s6Ly9wb3J0Zm9saW8taHVyc3VuLTIvLi9hcHAvY2xhc3Nlcy9QYWdlLmpzIiwid2VicGFjazovL3BvcnRmb2xpby1odXJzdW4tMi8uL2FwcC91dGlscy90ZXh0LmpzIiwid2VicGFjazovL3BvcnRmb2xpby1odXJzdW4tMi93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2hlY2sgZG9jdW1lbnQgZmlyc3Qgc28gaXQgZG9lc24ndCBlcnJvciBpbiBub2RlLmpzXG52YXIgc3R5bGUgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGVcbiAgOiB7fVxuXG52YXIgcHJlZml4ZXMgPSBbJ08nLCAnbXMnLCAnTW96JywgJ1dlYmtpdCddXG52YXIgdXBwZXIgPSAvKFtBLVpdKS9nXG52YXIgbWVtbyA9IHt9XG5cbi8qKlxuICogcHJlZml4IGBrZXlgXG4gKlxuICogICBwcmVmaXgoJ3RyYW5zZm9ybScpIC8vID0+IFdlYmtpdFRyYW5zZm9ybVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeChrZXkpe1xuICAvLyBDYW1lbCBjYXNlXG4gIGtleSA9IGtleS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbihfLCBjaGFyKXtcbiAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpXG4gIH0pXG5cbiAgLy8gV2l0aG91dCBwcmVmaXhcbiAgaWYgKHN0eWxlW2tleV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGtleVxuXG4gIC8vIFdpdGggcHJlZml4XG4gIHZhciBLZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSlcbiAgdmFyIGkgPSBwcmVmaXhlcy5sZW5ndGhcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ZXNbaV0gKyBLZXlcbiAgICBpZiAoc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG5hbWVcbiAgfVxuXG4gIHJldHVybiBrZXlcbn1cblxuLyoqXG4gKiBNZW1vaXplZCB2ZXJzaW9uIG9mIGBwcmVmaXhgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4TWVtb3ppZWQoa2V5KXtcbiAgcmV0dXJuIGtleSBpbiBtZW1vXG4gICAgPyBtZW1vW2tleV1cbiAgICA6IG1lbW9ba2V5XSA9IHByZWZpeChrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGFzaGVkIHByZWZpeFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeERhc2hlZChrZXkpe1xuICBrZXkgPSBwcmVmaXgoa2V5KVxuICBpZiAodXBwZXIudGVzdChrZXkpKSB7XG4gICAga2V5ID0gJy0nICsga2V5LnJlcGxhY2UodXBwZXIsICctJDEnKVxuICAgIHVwcGVyLmxhc3RJbmRleCA9IDBcbiAgfVxuICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmaXhNZW1vemllZFxubW9kdWxlLmV4cG9ydHMuZGFzaCA9IHByZWZpeERhc2hlZFxuIiwiaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuLi9jbGFzc2VzL0FuaW1hdGlvbi5qcydcclxuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhpZ2hsaWdodCBleHRlbmRzIEFuaW1hdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcclxuICAgICAgICBzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZUluKCkge1xyXG4gICAgICAgIHRoaXMudGltZWxpbmVJbiA9IEdTQVAudGltZWxpbmUoe1xyXG4gICAgICAgICAgICBkZWxheTogMSxcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy50aW1lbGluZUluLmZyb21UbyhcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA2LFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICBlYXNlOiAnZXhwby5vdXQnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGVPdXQoKSB7XHJcbiAgICAgICAgR1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBBbmltYXRpb24gZnJvbSAnLi4vY2xhc3Nlcy9BbmltYXRpb24uanMnXHJcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXHJcbmltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tICcuLi91dGlscy90ZXh0LmpzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyYWdyYXBoIGV4dGVuZHMgQW5pbWF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xyXG4gICAgICAgIHN1cGVyKHsgZWxlbWVudCwgZWxlbWVudHMgfSlcclxuXHJcbiAgICAgICAgLy8gdGhpcy5lbGVtZW50U3BhbiA9IHNwbGl0KHsgZWxlbWVudDogdGhpcy5lbGVtZW50IH0pXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZUluKCkge1xyXG4gICAgICAgIHRoaXMudGltZWxpbmVJbiA9IEdTQVAudGltZWxpbmUoKVxyXG4gICAgICAgIEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy50aW1lbGluZUluLmZyb21UbyhcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiAnMTAwJScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcclxuICAgICAgICAgICAgICAgIHk6ICcwJScsXHJcbiAgICAgICAgICAgICAgICBlYXNlOiAnZXhwby5vdXQnLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZU91dCgpIHtcclxuICAgICAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcclxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuLi9jbGFzc2VzL0FuaW1hdGlvbi5qcydcclxuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2guanMnXHJcbmltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tICcuLi91dGlscy90ZXh0LmpzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBBbmltYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICBlbGVtZW50cyxcclxuICAgICAgICB9KVxyXG4gICAgICAgIHNwbGl0KHtcclxuICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxyXG4gICAgICAgICAgICBhcHBlbmQ6IHRydWUsXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgc3BsaXQoe1xyXG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXHJcbiAgICAgICAgICAgIGFwcGVuZDogdHJ1ZSxcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuZWxlbWVudExpbmVzU3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbiBzcGFuJylcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlSW4oKSB7XHJcbiAgICAgICAgdGhpcy50aW1lbGluZUluID0gR1NBUC50aW1lbGluZSh7IGRlbGF5OiAwLjUgfSlcclxuICAgICAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGVhY2godGhpcy5lbGVtZW50TGluZXNTcGFucywgKGxpbmUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZWxpbmVJbi5mcm9tVG8oXHJcbiAgICAgICAgICAgICAgICBsaW5lLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHk6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IGluZGV4ICogMC4yLFxyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogJ2V4cG8ub3V0JyxcclxuICAgICAgICAgICAgICAgICAgICB5OiAnMCUnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZU91dCgpIHtcclxuICAgICAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL0NvbXBvbmVudC5qcydcclxuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2guanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICAgICAgc3VwZXIoeyBlbGVtZW50LCBlbGVtZW50cyB9KVxyXG4gICAgICAgIHRoaXMuY3JlYXRlT2JzZXJ2ZXIoKVxyXG4gICAgICAgIHRoaXMuYW5pbWF0ZU91dCgpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlT2JzZXJ2ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVJbigpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudClcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlSW4oKSB7fVxyXG5cclxuICAgIGFuaW1hdGVPdXQoKSB7fVxyXG59XHJcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9Db21wb25lbnQuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBc3luY0xvYWQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoeyBlbGVtZW50IH0pIHtcclxuICAgICAgICBzdXBlcih7IGVsZW1lbnQgfSlcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVPYnNlcnZlcigpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlT2JzZXJ2ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudC5zcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNyYyA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2guanMnXHJcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXHJcbmltcG9ydCBQcmVmaXggZnJvbSAncHJlZml4J1xyXG5cclxuaW1wb3J0IEFzeW5jTG9hZCBmcm9tICcuL0FzeW5jTG9hZC5qcydcclxuaW1wb3J0IEFuaW1hdGlvblRpdGxlIGZyb20gJy4uL2FuaW1hdGlvbnMvVGl0bGUuanMnXHJcbmltcG9ydCBBbmltYXRpb25QYXJhZ3JhcGggZnJvbSAnLi4vYW5pbWF0aW9ucy9QYXJhZ3JhcGguanMnXHJcbmltcG9ydCBBbmltYXRpb25IaWdobGlnaHQgZnJvbSAnLi4vYW5pbWF0aW9ucy9IaWdobGlnaHQuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgaWQsIGVsZW1lbnRzIH0pIHtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gZWxlbWVudFxyXG4gICAgICAgIHRoaXMuc2VsZWN0b3JDaGlsZHJlbiA9IHtcclxuICAgICAgICAgICAgLi4uZWxlbWVudHMsXHJcbiAgICAgICAgICAgIGxvYWRTY3JlZW46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkX19zY3JlZW4nKSxcclxuICAgICAgICAgICAgbG9hZFNjcmVlbkltZzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvYWRfX3NjcmVlbl9faW1nJyksXHJcbiAgICAgICAgICAgIGFuaW1hdGlvblRpdGxlczogJ1tkYXRhLWFuaW1hdGlvbj1cInRpdGxlXCJdJyxcclxuICAgICAgICAgICAgYW5pbWF0aW9uUGFyYWdyYXBoOiAnW2RhdGEtYW5pbWF0aW9uPVwicGFyYWdyYXBoXCJdJyxcclxuICAgICAgICAgICAgYW5pbWF0aW9uSGlnaGxpZ2h0OiAnW2RhdGEtYW5pbWF0aW9uPVwiaGlnaGxpZ2h0XCJdJyxcclxuICAgICAgICAgICAgcHJlbG9hZGVyczogJ1tkYXRhLXNyY10nLFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlkID0gaWRcclxuICAgICAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgICAgICAgY3VycmVudDogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICAgICAgICBsaW1pdDogMCxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubW91c2UgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeCgndHJhbnNmb3JtJylcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKVxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7fVxyXG5cclxuICAgICAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKHNlbGVjdG9yLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHxcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8XHJcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHNlbGVjdG9yKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHNlbGVjdG9yXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzLndyYXBwZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwubGltaXQgPSB0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUFuaW1hdGlvbigpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVBdWRpbygpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVBc3luY0xvYWQoKVxyXG4gICAgICAgIGlmICh0aGlzLmlkID09PSAnaG9tZScpIHRoaXMuY3JlYXRlUG9pbnRzKClcclxuICAgICAgICBpZiAodGhpcy5pZCA9PT0gJ2dhbGxlcnknKSB0aGlzLmNyZWF0ZVNjcm9sbEdzYXAoKVxyXG4gICAgICAgIGlmICh0aGlzLmlkID09PSAnc3BvdGlmeScpIHRoaXMucGxheUhhbmRsZSgpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIGVhY2godGhpcy5lbGVtZW50cy5hbmltYXRpb25UaXRsZXMsIChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBBbmltYXRpb25UaXRsZSh7IGVsZW1lbnQgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBlYWNoKHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uUGFyYWdyYXBoLCAoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBuZXcgQW5pbWF0aW9uUGFyYWdyYXBoKHsgZWxlbWVudCB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGVhY2godGhpcy5lbGVtZW50cy5hbmltYXRpb25IaWdobGlnaHQsIChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBBbmltYXRpb25IaWdobGlnaHQoeyBlbGVtZW50IH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVBdWRpbygpIHtcclxuICAgICAgICB0aGlzLnNpZGVBdWRpbyA9IG5ldyBBdWRpbygnL0F1ZGlvL21peGtpdC1pbnRlcmZhY2UtaGludC1ub3RpZmljYXRpb24tOTExLndhdicpXHJcbiAgICAgICAgdGhpcy5zaWRlQXVkaW8udm9sdW1lID0gMVxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMubG9hZFNjcmVlbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zaWRlQXVkaW8ucGxheSgpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVBc3luY0xvYWQoKSB7XHJcbiAgICAgICAgZWFjaCh0aGlzLmVsZW1lbnRzLnByZWxvYWRlcnMsIChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBBc3luY0xvYWQoeyBlbGVtZW50OiBlbGVtZW50LnRhcmdldCA/IGVsZW1lbnQudGFyZ2V0IDogZWxlbWVudCB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBHU0FQLnRpbWVsaW5lKClcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uT3V0LnNldCh0aGlzLmVsZW1lbnRzLmxvYWRTY3JlZW4sIHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6ICctMjAwJScsXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbk91dC5jYWxsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IEdTQVAudGltZWxpbmUoKVxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkluLnNldCh0aGlzLmVsZW1lbnRzLmxvYWRTY3JlZW4sIHtcclxuICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Jbi5zZXQodGhpcy5lbGVtZW50cy5sb2FkU2NyZWVuSW1nLCB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uSW4udG8odGhpcy5lbGVtZW50cy5sb2FkU2NyZWVuLCB7XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAnMCUnLFxyXG4gICAgICAgICAgICAgICAgZWFzZTogJ0V4cG8uZWFzZUluT3V0JyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Jbi50byh0aGlzLmVsZW1lbnRzLmxvYWRTY3JlZW4sIHtcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgIGxlZnQ6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgIGVhc2U6ICdFeHBvLmVhc2VJbk91dCcsXHJcbiAgICAgICAgICAgICAgICAvLyBkZWxheTogLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb25SZXNpemUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHM/LndyYXBwZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwubGltaXQgPSB0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU2Nyb2xsKGUpIHtcclxuICAgICAgICB0aGlzLnNjcm9sbC50YXJnZXQgKz0gZS5waXhlbFlcclxuICAgICAgICBpZiAodGhpcy5zY3JvbGwudGFyZ2V0ICUgODAwID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zaWRlQXVkaW8ucGxheSgpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2Vtb3ZlKGUpIHtcclxuICAgICAgICB0aGlzLm1vdXNlLnggPSAoZS5jbGllbnRYIC0gd2luZG93LmlubmVyV2lkdGgpICogMC4wMSArIDVcclxuICAgICAgICB0aGlzLm1vdXNlLnkgPSAoZS5jbGllbnRZIC0gd2luZG93LmlubmVySGVpZ2h0KSAqIDAuMDEgKyA1XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaE1vdmUoKSB7fVxyXG5cclxuICAgIG9uVG91Y2hTdGFydCgpIHt9XHJcblxyXG4gICAgb25Ub3VjaEVuZCgpIHt9XHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IEdTQVAudXRpbHMuY2xhbXAoMCwgdGhpcy5zY3JvbGwubGltaXQsIHRoaXMuc2Nyb2xsLnRhcmdldClcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsLnRhcmdldCA8IDAuMDEpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gMFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnNjcm9sbC5jdXJyZW50LCB0aGlzLnNjcm9sbC50YXJnZXQsIDAuMDEpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzPy53cmFwcGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZVtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtUHJlZml4XHJcbiAgICAgICAgICAgIF0gPSBgdHJhbnNsYXRlWSgtJHt0aGlzLnNjcm9sbC5jdXJyZW50fXB4KWBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzPy5iYXIpIHtcclxuICAgICAgICAgICAgZWFjaCh0aGlzLmVsZW1lbnRzLmJhciwgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoLSR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5wb2ludHMpIHtcclxuICAgICAgICAgICAgZWFjaCh0aGlzLmVsZW1lbnRzLnBvaW50cywgKHBvaW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcG9pbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0aGlzLm1vdXNlLnggKiAoaW5kZXggKyAxKX1weCkgdHJhbnNsYXRlWSgke1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2UueSAqIChpbmRleCArIDEpXHJcbiAgICAgICAgICAgICAgICB9cHgpYFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaC5qcydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcGxpdCh7IGVsZW1lbnQsIGV4cHJlc3Npb24gPSAnICcsIGFwcGVuZCA9IHRydWUgfSkge1xyXG4gICAgY29uc3Qgd29yZHMgPSBzcGxpdFRleHQoZWxlbWVudC5pbm5lckhUTUwudG9TdHJpbmcoKS50cmltKCksIGV4cHJlc3Npb24pXHJcblxyXG4gICAgbGV0IGlubmVySFRNTCA9ICcnXHJcblxyXG4gICAgZWFjaCh3b3JkcywgKGxpbmUpID0+IHtcclxuICAgICAgICBpZiAobGluZS5pbmRleE9mKCc8YnI+JykgPiAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IGxpbmUuc3BsaXQoJzxicj4nKVxyXG5cclxuICAgICAgICAgICAgZWFjaChsaW5lcywgKGxpbmUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpbm5lckhUTUwgKz0gaW5kZXggPiAwID8gJzxicj4nICsgcGFyc2VMaW5lKGxpbmUpIDogcGFyc2VMaW5lKGxpbmUpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5uZXJIVE1MICs9IHBhcnNlTGluZShsaW5lKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUxcclxuXHJcbiAgICBjb25zdCBzcGFucyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpXHJcblxyXG4gICAgaWYgKGFwcGVuZCkge1xyXG4gICAgICAgIGVhY2goc3BhbnMsIChzcGFuKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzU2luZ2xlTGV0dGVyID0gc3Bhbi50ZXh0Q29udGVudC5sZW5ndGggPT09IDFcclxuICAgICAgICAgICAgY29uc3QgaXNOb3RFbXB0eSA9IHNwYW4uaW5uZXJIVE1MLnRyaW0oKSAhPT0gJydcclxuICAgICAgICAgICAgY29uc3QgaXNOb3RBbmRDaGFyYWN0ZXIgPSBzcGFuLnRleHRDb250ZW50ICE9PSAnJidcclxuICAgICAgICAgICAgY29uc3QgaXNOb3REYXNoQ2hhcmFjdGVyID0gc3Bhbi50ZXh0Q29udGVudCAhPT0gJy0nXHJcblxyXG4gICAgICAgICAgICBpZiAoaXNTaW5nbGVMZXR0ZXIgJiYgaXNOb3RFbXB0eSAmJiBpc05vdEFuZENoYXJhY3RlciAmJiBpc05vdERhc2hDaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHNwYW4uaW5uZXJIVE1MID0gYCR7c3Bhbi50ZXh0Q29udGVudH0mbmJzcDtgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzcGFuc1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlKHNwYW5zKSB7XHJcbiAgICBjb25zdCBsaW5lcyA9IFtdXHJcbiAgICBsZXQgd29yZHMgPSBbXVxyXG5cclxuICAgIGxldCBwb3NpdGlvbiA9IHNwYW5zWzBdLm9mZnNldFRvcFxyXG5cclxuICAgIGVhY2goc3BhbnMsIChzcGFuLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGlmIChzcGFuLm9mZnNldFRvcCA9PT0gcG9zaXRpb24pIHtcclxuICAgICAgICAgICAgd29yZHMucHVzaChzcGFuKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNwYW4ub2Zmc2V0VG9wICE9PSBwb3NpdGlvbikge1xyXG4gICAgICAgICAgICBsaW5lcy5wdXNoKHdvcmRzKVxyXG5cclxuICAgICAgICAgICAgd29yZHMgPSBbXVxyXG4gICAgICAgICAgICB3b3Jkcy5wdXNoKHNwYW4pXHJcblxyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHNwYW4ub2Zmc2V0VG9wXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5kZXggKyAxID09PSBzcGFucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGluZXMucHVzaCh3b3JkcylcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBsaW5lc1xyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdFRleHQodGV4dCwgZXhwcmVzc2lvbikge1xyXG4gICAgY29uc3Qgc3BsaXRzID0gdGV4dC5zcGxpdCgnPGJyPicpXHJcblxyXG4gICAgbGV0IHdvcmRzID0gW11cclxuXHJcbiAgICBlYWNoKHNwbGl0cywgKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICB3b3Jkcy5wdXNoKCc8YnI+JylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdvcmRzID0gd29yZHMuY29uY2F0KGl0ZW0uc3BsaXQoZXhwcmVzc2lvbikpXHJcblxyXG4gICAgICAgIGxldCBpc0xpbmsgPSBmYWxzZVxyXG4gICAgICAgIGxldCBsaW5rID0gJydcclxuXHJcbiAgICAgICAgY29uc3QgaW5uZXJIVE1MID0gW11cclxuXHJcbiAgICAgICAgZWFjaCh3b3JkcywgKHdvcmQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJzxhJykgfHwgd29yZC5pbmNsdWRlcygnPHN0cm9uZycpKSkge1xyXG4gICAgICAgICAgICAgICAgbGluayA9ICcnXHJcblxyXG4gICAgICAgICAgICAgICAgaXNMaW5rID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNMaW5rKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5rICs9IGAgJHt3b3JkfWBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzTGluayAmJiAod29yZC5pbmNsdWRlcygnL2E+JykgfHwgd29yZC5pbmNsdWRlcygnL3N0cm9uZz4nKSkpIHtcclxuICAgICAgICAgICAgICAgIGlubmVySFRNTC5wdXNoKGxpbmspXHJcblxyXG4gICAgICAgICAgICAgICAgbGluayA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghaXNMaW5rICYmIGxpbmsgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBpbm5lckhUTUwucHVzaCh3b3JkKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNMaW5rICYmICh3b3JkLmluY2x1ZGVzKCcvYT4nKSB8fCB3b3JkLmluY2x1ZGVzKCcvc3Ryb25nPicpKSkge1xyXG4gICAgICAgICAgICAgICAgaXNMaW5rID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHdvcmRzID0gaW5uZXJIVE1MXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiB3b3Jkc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUxpbmUobGluZSkge1xyXG4gICAgbGluZSA9IGxpbmUudHJpbSgpXHJcblxyXG4gICAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmUgPT09ICcgJykge1xyXG4gICAgICAgIHJldHVybiBsaW5lXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBsaW5lID09PSAnPGJyPicgPyAnPGJyPicgOiBgPHNwYW4+JHtsaW5lfTwvc3Bhbj5gICsgKGxpbmUubGVuZ3RoID4gMSA/ICcgJyA6ICcnKVxyXG4gICAgfVxyXG59XHJcbiIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcImIxZWYxNmVkYjg2ZDdlYjI0NTUyXCIpIl0sIm5hbWVzIjpbInN0eWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicHJlZml4ZXMiLCJ1cHBlciIsIm1lbW8iLCJwcmVmaXgiLCJrZXkiLCJyZXBsYWNlIiwiXyIsImNoYXIiLCJ0b1VwcGVyQ2FzZSIsInVuZGVmaW5lZCIsIktleSIsImNoYXJBdCIsInNsaWNlIiwiaSIsImxlbmd0aCIsIm5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGFzaCIsInRlc3QiLCJsYXN0SW5kZXgiLCJ0b0xvd2VyQ2FzZSIsIkhpZ2hsaWdodCIsIkFuaW1hdGlvbiIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImVsZW1lbnRzIiwic3VwZXIiLCJhbmltYXRlSW4iLCJ0aGlzIiwidGltZWxpbmVJbiIsIkdTQVAiLCJkZWxheSIsImF1dG9BbHBoYSIsImZyb21UbyIsImhlaWdodCIsImR1cmF0aW9uIiwiZWFzZSIsImFuaW1hdGVPdXQiLCJQYXJhZ3JhcGgiLCJ5IiwiVGl0bGUiLCJzcGxpdCIsImFwcGVuZCIsImVsZW1lbnRMaW5lc1NwYW5zIiwicXVlcnlTZWxlY3RvckFsbCIsImVhY2giLCJsaW5lIiwiaW5kZXgiLCJDb21wb25lbnQiLCJjcmVhdGVPYnNlcnZlciIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiQXN5bmNMb2FkIiwic3JjIiwiZ2V0QXR0cmlidXRlIiwib25sb2FkIiwiY2xhc3NMaXN0IiwiYWRkIiwiUGFnZSIsImlkIiwic2VsZWN0b3IiLCJzZWxlY3RvckNoaWxkcmVuIiwibG9hZFNjcmVlbiIsInF1ZXJ5U2VsZWN0b3IiLCJsb2FkU2NyZWVuSW1nIiwiYW5pbWF0aW9uVGl0bGVzIiwiYW5pbWF0aW9uUGFyYWdyYXBoIiwiYW5pbWF0aW9uSGlnaGxpZ2h0IiwicHJlbG9hZGVycyIsInNjcm9sbCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJsaW1pdCIsIm1vdXNlIiwieCIsInRyYW5zZm9ybVByZWZpeCIsIlByZWZpeCIsImNyZWF0ZSIsIndpbmRvdyIsIkhUTUxFbGVtZW50IiwiTm9kZUxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJ3cmFwcGVyIiwiY2xpZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjcmVhdGVBbmltYXRpb24iLCJjcmVhdGVBdWRpbyIsImNyZWF0ZUFzeW5jTG9hZCIsImNyZWF0ZVBvaW50cyIsImNyZWF0ZVNjcm9sbEdzYXAiLCJwbGF5SGFuZGxlIiwiQW5pbWF0aW9uVGl0bGUiLCJBbmltYXRpb25QYXJhZ3JhcGgiLCJBbmltYXRpb25IaWdobGlnaHQiLCJzaWRlQXVkaW8iLCJBdWRpbyIsInZvbHVtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJwbGF5Iiwic2hvdyIsIlByb21pc2UiLCJyZXNvbHZlIiwiYW5pbWF0aW9uT3V0Iiwic2V0IiwibGVmdCIsImNhbGwiLCJoaWRlIiwiYW5pbWF0aW9uSW4iLCJ0byIsIndpZHRoIiwib25SZXNpemUiLCJvblNjcm9sbCIsImUiLCJwaXhlbFkiLCJvbk1vdXNlbW92ZSIsImNsaWVudFgiLCJpbm5lcldpZHRoIiwiY2xpZW50WSIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaEVuZCIsInVwZGF0ZSIsImJhciIsInRyYW5zZm9ybSIsInBvaW50cyIsInBvaW50IiwiZXhwcmVzc2lvbiIsIndvcmRzIiwidGV4dCIsInNwbGl0cyIsIml0ZW0iLCJwdXNoIiwiY29uY2F0IiwiaXNMaW5rIiwibGluayIsImlubmVySFRNTCIsIndvcmQiLCJpbmNsdWRlcyIsInNwbGl0VGV4dCIsInRvU3RyaW5nIiwidHJpbSIsImluZGV4T2YiLCJsaW5lcyIsInBhcnNlTGluZSIsInNwYW5zIiwic3BhbiIsImlzU2luZ2xlTGV0dGVyIiwidGV4dENvbnRlbnQiLCJpc05vdEVtcHR5IiwiaXNOb3RBbmRDaGFyYWN0ZXIiLCJpc05vdERhc2hDaGFyYWN0ZXIiLCJjYWxjdWxhdGUiLCJwb3NpdGlvbiIsIm9mZnNldFRvcCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==