/*! For license information please see main.1d4f90abb1dc3063d7d1.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio_hursun_2("main",{"./app/components/canvas/home/index.js":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var s=a("./node_modules/three/build/three.module.js"),i=a("./node_modules/gsap/index.js"),r=a("./app/classes/Detection.js"),l=a("./app/shaders/human/vertex.glsl"),o=a("./app/shaders/human/fragment.glsl"),h=a("./app/shaders/particle/vertex.glsl"),c=a("./app/shaders/particle/fragment.glsl");class n{constructor({scene:e,gltfLoader:t,camera:a,renderer:i}){this.scene=e,this.gltfLoader=t,this.camera=a,this.renderer=i,this.uniforms={time:{value:0},speed:{value:10},charSize:{value:{x:1,y:1}},charResolution:{value:10},color:{value:new s.Color("red")},resolution:{value:{x:2,y:2}}},this.scroll={target:0,current:0,limit:document.querySelector(".home__wrapper").clientHeight},this.y={start:0,distance:0,end:0},this.group=new s.Group,this.scene.add(this.group),this.createObject(),this.createParticle()}updateAllMaterial(){this.scene.traverse((e=>{e instanceof s.Mesh&&e.material instanceof s.MeshStandardMaterial&&(e.material.needsUpdate=!0)}))}createObject(){this.cube=new s.Mesh(new s.BoxGeometry(1,1,1),new s.MeshBasicMaterial),this.cube.position.set(0,-18,0),this.material=new s.RawShaderMaterial({vertexShader:l.default,fragmentShader:o.default,uniforms:this.uniforms}),this.gltfLoader.load("models/human/scene.gltf",(e=>{this.model=e.scene,this.model.children[0].children[0].children.forEach((e=>{e.material=this.material})),this.model.position.y=-16,this.group.add(this.model),this.updateAllMaterial()}))}createParticle(){const e=new Float32Array(3e4);for(let t=0;t<1e4;t++){const a=3*t;e[a]=100*(Math.random()-.5),e[a+1]=100*Math.random(),e[a+2]=100*(Math.random()-.5)}const t=new s.BufferGeometry;t.setAttribute("position",new s.BufferAttribute(e,3)),this.particleMaterial=new s.RawShaderMaterial({fragmentShader:c.default,vertexShader:h.default,depthWrite:!1,blending:s.AdditiveBlending,uniforms:{uTime:{value:0},uSize:{value:10*this.renderer.getPixelRatio()}}}),this.particle=new s.Points(t,this.particleMaterial),this.particle.position.y=-35,this.group.add(this.particle)}onScroll({pixelY:e}){this.scroll.target+=e}onTouchStart(e){this.y.start=e.touches[0].clientY}onTouchMove(e){this.y.start>e.touches[0].clientY?this.y.distance+=50:this.y.distance-=100}update(e){r.default.isDesktop()?this.scroll.target=i.default.utils.clamp(0,this.scroll.limit,this.scroll.target):this.scroll.target=i.default.utils.clamp(0,this.scroll.limit,this.y.distance),this.scroll.target<1&&(this.scroll.target=0),this.y.distance<.01&&(this.y.distance=0),this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,.01),this.head&&(this.head.rotation.y=e),this.particleMaterial&&(this.particleMaterial.uniforms.uTime.value=e),this.scroll.current<4600?(this.camera.rotation.x=1e-4*this.scroll.current,this.camera.rotation.y=.001*this.scroll.current,this.camera.position.z=5*Math.cos(.001*this.scroll.current),this.camera.position.y=.003*-this.scroll.current,this.camera.position.x=5*Math.sin(.001*this.scroll.current),document.querySelector(".home__end").classList.remove("active")):(i.default.to(this.camera.position,{x:0,y:-6,z:15,duration:6,ease:"expo.out"}),i.default.to(this.camera.rotation,{x:0,y:0,z:0,duration:1}),document.querySelector(".home__end").classList.add("active")),this.uniforms.time.value=e}destroy(){this.scene.remove(this.group)}}}},(function(e){e.h=()=>"5aadef55afeeb9c7386e"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,