/*! For license information please see main.ced918fe29bff304efaa.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio_hursun_2("main",{"./app/pages/gallery/index.js":(e,a,l)=>{l.r(a),l.d(a,{default:()=>t});var s=l("./app/classes/Page.js");class t extends s.default{constructor(){super({element:".content",id:"gallery",elements:{scrollDist:"#content",app:".gallery__scroll__images",imgGroup:".gallery__images__imgGroup",img:".gallery__images__image",detail:"#detail"}})}}}},(function(e){e.h=()=>"9dca3b804f8d1a106695"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,