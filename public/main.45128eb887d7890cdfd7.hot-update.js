/*! For license information please see main.45128eb887d7890cdfd7.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio_hursun_2("main",{"./app/components/canvas/home/index.js":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var s=a("./node_modules/three/build/three.module.js"),i=a("./node_modules/gsap/index.js"),r=a("./app/classes/Detection.js"),l=a("./app/shaders/human/vertex.glsl"),o=a("./app/shaders/human/fragment.glsl"),c=a("./app/shaders/particle/vertex.glsl"),h=a("./app/shaders/particle/fragment.glsl");class n{constructor({scene:e,gltfLoader:t,camera:a,renderer:i}){this.scene=e,this.gltfLoader=t,this.camera=a,this.renderer=i,this.uniforms={time:{value:0},speed:{value:50},charSize:{value:{x:1,y:1}},charResolution:{value:5.5},color:{value:new s.Color("red")},resolution:{value:{x:3,y:5}}},this.scroll={target:0,current:0,limit:document.querySelector(".home__wrapper").clientHeight},this.y={start:0,distance:0,end:0},this.group=new s.Group,this.scene.add(this.group),this.createObject(),this.createParticle()}updateAllMaterial(){this.scene.traverse((e=>{e instanceof s.Mesh&&e.material instanceof s.MeshStandardMaterial&&(e.material.needsUpdate=!0)}))}createObject(){this.cube=new s.Mesh(new s.BoxGeometry(1,1,1),new s.MeshBasicMaterial),this.cube.position.set(0,-18,0),this.material=new s.RawShaderMaterial({vertexShader:l.default,fragmentShader:o.default,uniforms:this.uniforms}),this.gltfLoader.load("models/human/scene.gltf",(e=>{this.model=e.scene,this.model.children[0].children[0].children.forEach((e=>{e.material=this.material})),this.model.position.y=-16,this.group.add(this.model),this.updateAllMaterial()}))}createParticle(){const e=new Float32Array(3e4);for(let t=0;t<1e4;t++){const a=3*t;e[a]=100*(Math.random()-.5),e[a+1]=100*Math.random(),e[a+2]=100*(Math.random()-.5)}const t=new s.BufferGeometry;t.setAttribute("position",new s.BufferAttribute(e,3)),this.particleMaterial=new s.RawShaderMaterial({fragmentShader:h.default,vertexShader:c.default,depthWrite:!1,blending:s.AdditiveBlending,uniforms:{uTime:{value:0},uSize:{value:10*this.renderer.getPixelRatio()}}}),this.particle=new s.Points(t,this.particleMaterial),this.particle.position.y=-35,this.group.add(this.particle)}onScroll({pixelY:e}){this.scroll.target+=e}onTouchStart(e){this.y.start=e.touches[0].clientY}onTouchMove(e){this.y.start>e.touches[0].clientY?this.y.distance+=50:this.y.distance-=100}update(e){r.default.isDesktop()?this.scroll.target=i.default.utils.clamp(0,this.scroll.limit,this.scroll.target):this.scroll.target=i.default.utils.clamp(0,this.scroll.limit,this.y.distance),this.scroll.target<1&&(this.scroll.target=0),this.y.distance<.01&&(this.y.distance=0),this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,.01),this.head&&(this.head.rotation.y=e),this.particleMaterial&&(this.particleMaterial.uniforms.uTime.value=e),this.scroll.current<4600?(this.camera.rotation.x=1e-4*this.scroll.current,this.camera.rotation.y=.001*this.scroll.current,this.camera.position.z=5*Math.cos(.001*this.scroll.current),this.camera.position.y=.003*-this.scroll.current,this.camera.position.x=5*Math.sin(.001*this.scroll.current),document.querySelector(".home__end").classList.remove("active")):(i.default.to(this.camera.position,{x:0,y:-6,z:15,duration:6,ease:"expo.out"}),i.default.to(this.camera.rotation,{x:0,y:0,z:0,duration:1}),document.querySelector(".home__end").classList.add("active")),this.uniforms.time.value=e}destroy(){this.scene.remove(this.group)}}}},(function(e){e.h=()=>"76fb7c4f3c22ab8be0d7"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0UsUUFDckNkLEtBQUtGLE9BQU9rQyxTQUFTd0MsRUFBNEMsRUFBeEMxQixLQUFLMkIsSUFBMEIsS0FBdEJ6RSxLQUFLWSxPQUFPRSxTQUM5Q2QsS0FBS0YsT0FBT2tDLFNBQVN6QixFQUEyQixNQUF0QlAsS0FBS1ksT0FBT0UsUUFDdENkLEtBQUtGLE9BQU9rQyxTQUFTMUIsRUFBNEMsRUFBeEN3QyxLQUFLNEIsSUFBMEIsS0FBdEIxRSxLQUFLWSxPQUFPRSxTQUM5Q0UsU0FBU0MsY0FBYyxjQUFjMEQsVUFBVUMsT0FBTyxZQUV0RFAsRUFBQUEsUUFBQUEsR0FBUXJFLEtBQUtGLE9BQU9rQyxTQUFVLENBQzFCMUIsRUFBRyxFQUNIQyxHQUFJLEVBQ0ppRSxFQUFHLEdBQ0hLLFNBQVUsRUFDVkMsS0FBTSxhQUVWVCxFQUFBQSxRQUFBQSxHQUFRckUsS0FBS0YsT0FBT3lFLFNBQVUsQ0FDMUJqRSxFQUFHLEVBQ0hDLEVBQUcsRUFDSGlFLEVBQUcsRUFDSEssU0FBVSxJQUdkN0QsU0FBU0MsY0FBYyxjQUFjMEQsVUFBVXBELElBQUksV0FHdkR2QixLQUFLQyxTQUFTQyxLQUFLQyxNQUFRZ0UsQ0FDOUIsQ0FFRFksVUFDSS9FLEtBQUtKLE1BQU1nRixPQUFPNUUsS0FBS3NCLE1BQzFCLGtCQzFLTDBELEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8taHVyc3VuLTIvLi9hcHAvY29tcG9uZW50cy9jYW52YXMvaG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3J0Zm9saW8taHVyc3VuLTIvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJ1xyXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xyXG5pbXBvcnQgRGV0ZWN0aW9uTWFuYWdlciBmcm9tICcuLi8uLi8uLi9jbGFzc2VzL0RldGVjdGlvbi5qcydcclxuXHJcbmltcG9ydCB2ZXJ0ZXhTaGFkZXIgZnJvbSAnLi4vLi4vLi4vc2hhZGVycy9odW1hbi92ZXJ0ZXguZ2xzbCdcclxuaW1wb3J0IGZyYWdtZW50U2hhZGVyIGZyb20gJy4uLy4uLy4uL3NoYWRlcnMvaHVtYW4vZnJhZ21lbnQuZ2xzbCdcclxuXHJcbmltcG9ydCB2ZXJ0ZXhTaGFkZXJQYXJ0aWNsZSBmcm9tICcuLi8uLi8uLi9zaGFkZXJzL3BhcnRpY2xlL3ZlcnRleC5nbHNsJ1xyXG5pbXBvcnQgZnJhZ21lbnRTaGFkZXJQYXJ0aWNsZSBmcm9tICcuLi8uLi8uLi9zaGFkZXJzL3BhcnRpY2xlL2ZyYWdtZW50Lmdsc2wnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgc2NlbmUsIGdsdGZMb2FkZXIsIGNhbWVyYSwgcmVuZGVyZXIgfSkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMuZ2x0ZkxvYWRlciA9IGdsdGZMb2FkZXJcclxuICAgICAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYVxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlclxyXG5cclxuICAgICAgICB0aGlzLnVuaWZvcm1zID0ge1xyXG4gICAgICAgICAgICB0aW1lOiB7IHZhbHVlOiAwLjAgfSxcclxuICAgICAgICAgICAgc3BlZWQ6IHsgdmFsdWU6IDUwLjAgfSxcclxuICAgICAgICAgICAgY2hhclNpemU6IHsgdmFsdWU6IHsgeDogMS4wLCB5OiAxLjAgfSB9LFxyXG4gICAgICAgICAgICBjaGFyUmVzb2x1dGlvbjogeyB2YWx1ZTogNS41IH0sXHJcbiAgICAgICAgICAgIGNvbG9yOiB7IHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoJ3JlZCcpIH0sXHJcbiAgICAgICAgICAgIHJlc29sdXRpb246IHsgdmFsdWU6IHsgeDogMy4wLCB5OiA1LjAgfSB9LFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgICAgICAgIHRhcmdldDogMCxcclxuICAgICAgICAgICAgY3VycmVudDogMCxcclxuICAgICAgICAgICAgbGltaXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX193cmFwcGVyJykuY2xpZW50SGVpZ2h0LFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy55ID0ge1xyXG4gICAgICAgICAgICBzdGFydDogMCxcclxuICAgICAgICAgICAgZGlzdGFuY2U6IDAsXHJcbiAgICAgICAgICAgIGVuZDogMCxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKVxyXG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZ3JvdXApXHJcbiAgICAgICAgdGhpcy5jcmVhdGVPYmplY3QoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlUGFydGljbGUoKVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFsbE1hdGVyaWFsKCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUudHJhdmVyc2UoKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGNoaWxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaCAmJlxyXG4gICAgICAgICAgICAgICAgY2hpbGQubWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVPYmplY3QoKSB7XHJcbiAgICAgICAgdGhpcy5jdWJlID0gbmV3IFRIUkVFLk1lc2gobmV3IFRIUkVFLkJveEdlb21ldHJ5KDEsIDEsIDEpLCBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoKSlcclxuICAgICAgICB0aGlzLmN1YmUucG9zaXRpb24uc2V0KDAsIC0xOCwgMClcclxuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbmV3IFRIUkVFLlJhd1NoYWRlck1hdGVyaWFsKHtcclxuICAgICAgICAgICAgdmVydGV4U2hhZGVyLFxyXG4gICAgICAgICAgICBmcmFnbWVudFNoYWRlcixcclxuICAgICAgICAgICAgdW5pZm9ybXM6IHRoaXMudW5pZm9ybXMsXHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLmdsdGZMb2FkZXIubG9hZCgnbW9kZWxzL2h1bWFuL3NjZW5lLmdsdGYnLCAoZ2x0ZikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsID0gZ2x0Zi5zY2VuZVxyXG5cclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5jaGlsZHJlblswXS5jaGlsZHJlblswXS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwucG9zaXRpb24ueSA9IC0xNlxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0aGlzLm1vZGVsKVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFsbE1hdGVyaWFsKClcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVBhcnRpY2xlKCkge1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gMTAwMDBcclxuICAgICAgICBjb25zdCByYWRpdXMgPSAxMDBcclxuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogMylcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaTMgPSBpICogM1xyXG4gICAgICAgICAgICBwb3NpdGlvbnNbaTNdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogcmFkaXVzXHJcbiAgICAgICAgICAgIHBvc2l0aW9uc1tpMyArIDFdID0gTWF0aC5yYW5kb20oKSAqIHJhZGl1c1xyXG4gICAgICAgICAgICBwb3NpdGlvbnNbaTMgKyAyXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIHJhZGl1c1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKVxyXG4gICAgICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9ucywgMykpXHJcblxyXG4gICAgICAgIHRoaXMucGFydGljbGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiBmcmFnbWVudFNoYWRlclBhcnRpY2xlLFxyXG4gICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IHZlcnRleFNoYWRlclBhcnRpY2xlLFxyXG4gICAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgICAgICAgICB1VGltZTogeyB2YWx1ZTogMCB9LFxyXG4gICAgICAgICAgICAgICAgdVNpemU6IHsgdmFsdWU6IDEwICogdGhpcy5yZW5kZXJlci5nZXRQaXhlbFJhdGlvKCkgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLnBhcnRpY2xlID0gbmV3IFRIUkVFLlBvaW50cyhnZW9tZXRyeSwgdGhpcy5wYXJ0aWNsZU1hdGVyaWFsKVxyXG4gICAgICAgIHRoaXMucGFydGljbGUucG9zaXRpb24ueSA9IC0zNVxyXG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMucGFydGljbGUpXHJcbiAgICB9XHJcblxyXG4gICAgb25TY3JvbGwoeyBwaXhlbFkgfSkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBwaXhlbFlcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoU3RhcnQoZSkge1xyXG4gICAgICAgIHRoaXMueS5zdGFydCA9IGUudG91Y2hlc1swXS5jbGllbnRZXHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaE1vdmUoZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnkuc3RhcnQgPiBlLnRvdWNoZXNbMF0uY2xpZW50WSkge1xyXG4gICAgICAgICAgICB0aGlzLnkuZGlzdGFuY2UgKz0gNTBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnkuZGlzdGFuY2UgLT0gMTAwXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShlbGFwc2VkVGltZSkge1xyXG4gICAgICAgIGlmIChEZXRlY3Rpb25NYW5hZ2VyLmlzRGVza3RvcCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IEdTQVAudXRpbHMuY2xhbXAoMCwgdGhpcy5zY3JvbGwubGltaXQsIHRoaXMuc2Nyb2xsLnRhcmdldClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSBHU0FQLnV0aWxzLmNsYW1wKDAsIHRoaXMuc2Nyb2xsLmxpbWl0LCB0aGlzLnkuZGlzdGFuY2UpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zY3JvbGwudGFyZ2V0IDwgMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSAwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnkuZGlzdGFuY2UgPCAwLjAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMueS5kaXN0YW5jZSA9IDBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMuc2Nyb2xsLmN1cnJlbnQsIHRoaXMuc2Nyb2xsLnRhcmdldCwgMC4wMSlcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGVhZCkgdGhpcy5oZWFkLnJvdGF0aW9uLnkgPSBlbGFwc2VkVGltZVxyXG4gICAgICAgIGlmICh0aGlzLnBhcnRpY2xlTWF0ZXJpYWwpIHRoaXMucGFydGljbGVNYXRlcmlhbC51bmlmb3Jtcy51VGltZS52YWx1ZSA9IGVsYXBzZWRUaW1lXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgNDYwMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5yb3RhdGlvbi54ID0gdGhpcy5zY3JvbGwuY3VycmVudCAqIDAuMDAwMVxyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5yb3RhdGlvbi55ID0gdGhpcy5zY3JvbGwuY3VycmVudCAqIDAuMDAxXHJcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSBNYXRoLmNvcyh0aGlzLnNjcm9sbC5jdXJyZW50ICogMC4wMDEpICogNVxyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi55ID0gLXRoaXMuc2Nyb2xsLmN1cnJlbnQgKiAwLjAwM1xyXG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi54ID0gTWF0aC5zaW4odGhpcy5zY3JvbGwuY3VycmVudCAqIDAuMDAxKSAqIDVcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX2VuZCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgR1NBUC50byh0aGlzLmNhbWVyYS5wb3NpdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IC02LFxyXG4gICAgICAgICAgICAgICAgejogMTUsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNixcclxuICAgICAgICAgICAgICAgIGVhc2U6ICdleHBvLm91dCcsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIEdTQVAudG8odGhpcy5jYW1lcmEucm90YXRpb24sIHtcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICAgICAgejogMCxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX2VuZCcpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVuaWZvcm1zLnRpbWUudmFsdWUgPSBlbGFwc2VkVGltZVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmUodGhpcy5ncm91cClcclxuICAgIH1cclxufVxyXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCI3NmZiN2M0ZjNjMjJhYjhiZTBkN1wiKSJdLCJuYW1lcyI6WyJIb21lIiwiY29uc3RydWN0b3IiLCJzY2VuZSIsImdsdGZMb2FkZXIiLCJjYW1lcmEiLCJyZW5kZXJlciIsInRoaXMiLCJ1bmlmb3JtcyIsInRpbWUiLCJ2YWx1ZSIsInNwZWVkIiwiY2hhclNpemUiLCJ4IiwieSIsImNoYXJSZXNvbHV0aW9uIiwiY29sb3IiLCJUSFJFRSIsInJlc29sdXRpb24iLCJzY3JvbGwiLCJ0YXJnZXQiLCJjdXJyZW50IiwibGltaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGllbnRIZWlnaHQiLCJzdGFydCIsImRpc3RhbmNlIiwiZW5kIiwiZ3JvdXAiLCJhZGQiLCJjcmVhdGVPYmplY3QiLCJjcmVhdGVQYXJ0aWNsZSIsInVwZGF0ZUFsbE1hdGVyaWFsIiwidHJhdmVyc2UiLCJjaGlsZCIsIm1hdGVyaWFsIiwibmVlZHNVcGRhdGUiLCJjdWJlIiwicG9zaXRpb24iLCJzZXQiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImxvYWQiLCJnbHRmIiwibW9kZWwiLCJjaGlsZHJlbiIsImZvckVhY2giLCJwb3NpdGlvbnMiLCJGbG9hdDMyQXJyYXkiLCJjb3VudCIsImkiLCJpMyIsIk1hdGgiLCJyYW5kb20iLCJnZW9tZXRyeSIsInNldEF0dHJpYnV0ZSIsInBhcnRpY2xlTWF0ZXJpYWwiLCJmcmFnbWVudFNoYWRlclBhcnRpY2xlIiwidmVydGV4U2hhZGVyUGFydGljbGUiLCJkZXB0aFdyaXRlIiwiYmxlbmRpbmciLCJ1VGltZSIsInVTaXplIiwiZ2V0UGl4ZWxSYXRpbyIsInBhcnRpY2xlIiwib25TY3JvbGwiLCJwaXhlbFkiLCJvblRvdWNoU3RhcnQiLCJlIiwidG91Y2hlcyIsImNsaWVudFkiLCJvblRvdWNoTW92ZSIsInVwZGF0ZSIsImVsYXBzZWRUaW1lIiwiRGV0ZWN0aW9uTWFuYWdlciIsIkdTQVAiLCJoZWFkIiwicm90YXRpb24iLCJ6IiwiY29zIiwic2luIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZHVyYXRpb24iLCJlYXNlIiwiZGVzdHJveSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==